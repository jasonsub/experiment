LIB "teachstd.lib";
LIB "general.lib";
LIB "poly.lib";

proc multidiv(poly f, ideal I)
{
	poly p = f;
	poly r,fi = 0,0;
	ideal J;
	int s = size(I);
	J[s] = 0;
	int i, divmark;
	while (lead(p) != 0)
	{
		i = 1;
		divmark = 0;
		while (i <= s and divmark == 0)
		{
			fi = I[i];
			if(lead(p)/lead(fi) != 0)
			{
				J[i] = J[i] + lead(p)/lead(fi);
				p = p - lead(p)/lead(fi)*fi;
				divmark = 1;
			}
			else
			{
				i = i+1;
			}
		}
		if (divmark == 0)
		{
			r = r + lead(p);
			p = p - lead(p);
		}
	}
	return (r);  // Note this is a little different return value, only the remainder!!!!!!
}

proc bigPoly_gen(ideal A_in, number beta, int n)
{
  int i =2;
  poly f =  A + a0*beta;
  while(n>1)
  {
	beta = beta^2;
	f = f + A_in[i]*beta;
	n = n-1;
	i = i+1;
  }
  return (f);
}

proc bigPoly_sub(ideal A_in, ideal S, poly f, int n, poly w)
{
  int i;
  f = subst(f,A,w);
  for(i=1;i<=n;i=i+1)
  {
	f = subst(f,A_in[i],S[i]);
  }
  return (f);
}
/*
proc mysubst(poly f, poly rs, poly w)
{
  poly g=0;
  poly t;
  number c;
  int k;
  while(lead(f) != 0)
  {
	t = lead(f);
	f = f - t;
	if(t/rs != 0)
	{
	  c = leadcoef(t);
	  k = deg(t);
	  t = c*(w^k);
	}
	g = g + t;
  }
  return (g);
}

proc mysubst_ideal(ideal I, poly rs, poly w)
{
  int n = size(I);
  int i;
  for(i=1;i<=n;i=i+1)
  {
	I[i] = mysubst(I[i],rs,w);
  }
  return (I);
}
*/

proc bigNumPower(number c, int k)
{
  if(k==0)
  {
	return (c);
  }
  while(k>0)
  {
	c = c^2;
	k=k-1;
  }
  return (c);
}

proc getpower(poly f, poly rs)
{
  int i = 0;
  while (f/rs != 0)
  {
	i = i+1;
	f = f/rs;
  }
  return (i);
}

proc power_spec(poly f, int k, int n)
{
  poly g=0;
  number c;
  poly t;
  int ka;
  int kb;
  while(lead(f) != 0)
  {
	t = lead(f);
	f = f-t;
	ka = getpower(t,A);
	kb = deg(t) - ka;
	c = leadcoef(t);
	t = bigNumPower(c,k-1);  /***********  This line need to be strengthen when k is big  **********/
	ka = ((ka+k-2) mod n) + 1;
	kb = ((kb+k-2) mod n) + 1;
	t =t*A^ka*B^kb;
	g = g+t;
  }
  return (g);
}

proc subst_spec(poly f, poly rs, poly w, int n)
{
  poly g=0;
  number c;
  poly t;
  int outer_k;
  while(lead(f) != 0)
  {
	t = lead(f);
	f = f - t;
	if(t/rs != 0)
	{
	  c = leadcoef(t);
	  outer_k = deg(t);
	  t = power_spec(w,outer_k,n);
	  t = t*c;
	}
	g =g + t;
  }
  return (g);
}

proc conv_word(poly origin, poly last_poly, ideal red_A, ideal red_B, ideal red_r) /* last_poly is r + g(A,B) */
{
  int n = size(red_A);
  int i;
//  ideal word_red = A^(2^n)+A, B^(2^n)+B; // Note: How to present large as 2^233 ??
  for(i = 1; i <= n; i = i + 1)
  {
	origin = subst(origin, lead(red_A[i]), red_A[i] - lead(red_A[i]));
	origin = subst(origin, lead(red_B[i]), red_B[i] - lead(red_B[i]));
	origin = subst(origin, lead(red_r[i]), red_r[i] - lead(red_r[i]));
  }
  origin = subst_spec(origin, r, last_poly - r, n);
//  origin = multidiv(origin,word_red); // Note: Any trick to reduce ultra high order Word-level terms ??
  return(origin/leadcoef(origin));
}

proc preprocess(poly f0, ideal vec_A, ideal vec_B, ideal vec_r)
{
  int len = size(vec_A);
  ideal result;
  poly f1,f2;
  f2 = f0;
  int i = 1;
  int j;
  result[1] = f0/leadcoef(f0);
  poly t;
  poly temp;
  number c;

  for(i = 1; i < len; i= i+1)
  {
	f0 = f2;
	f1 = 0;
	while(lead(f0) != 0)
	{
	  t = lead(f0);
	  f0 = f0 - t;
	  c = leadcoef(t);
	  temp = t/c;
	  c = c*c;
	  temp = temp*c;
	  if(t/A != 0)
	  {
		temp = temp * A;
	  }
	  f1 = f1 + temp;
	}
	f2 = f1 + f2*leadcoef(f1)/leadcoef(f2);
	result[i+1] = f2/leadcoef(f2);
  }
  
  poly tobesub;

  for(i = len; i > 1; i= i-1)
  {
	tobesub = lead(result[i]);
	temp = result[i]-tobesub;
	for(j = i-1; j >= 1; j = j - 1)
	{
	  result[j] = subst(result[j], tobesub, temp);
	}
  }
  
  /* This need to be revise bitwise */
  /*  ideal result_B = subst(result, a0, b0, a1, b1, a2, b2, a3, b3, a4, b4, A, B);
  ideal result_r = subst(result, a0, r0, a1, r1, a2, r2, a3, r3, a4, r4, A, r);  */

  ideal result_B = result;
  ideal result_r = result;
  for(i = 1; i <= len; i=i+1)
  {
	result_B[i] = result_B[i] - vec_A[i] + vec_B[i]; /* because only leadmonom is a single bit var */
	result_r[i] = result_r[i] - vec_A[i] + vec_r[i];
  }
  
//  result_B[1];
  
  result_B = subst(result_B, A, B);
  result_r = subst(result_r, A, r);
  
  return (result,result_B,result_r);
}

proc findspoly(ideal J)
{
  ideal J0 = sort(J)[1];
  poly f1 = J0[size(J)];
  poly f2 = J0[size(J)-1];
  poly sp = spoly(f1,f2);
  poly rem;
  rem = multidiv(sp,J);   /* This is where F4-reduction can be used */
  return (rem/leadcoef(rem));
}

proc fastgb(poly r_in, ideal I0, ideal I1, ideal I2, ideal I3)
{
  poly spoly1 = findspoly(I0);
  return (conv_word(spoly1, r_in, I1, I2, I3));
}

proc tran(ideal array_A, ideal array_B, poly r_in, number beta, ideal I1, ideal I2, ideal I3, poly bigpoly_A, poly bigpoly_B, poly bigpoly_r, poly bigpoly_R)
{ 
  ideal I = array_A[52]+array_A[53]+c1,
array_A[22]+array_A[55]+c2,
array_A[57]+array_A[63]+c3,
array_A[48]+array_A[59]+c4,
array_A[40]+array_A[61]+c5,
array_A[63]+array_A[4]+c6,
array_A[25]+array_A[65]+c7,
array_A[67]+array_A[82]+c8,
array_A[30]+array_A[69]+c9,
array_A[27]+array_A[71]+c10,
array_A[69]+array_A[73]+c11,
array_A[75]+array_A[100]+c12,
array_A[77]+array_A[89]+c13,
array_A[43]+array_A[79]+c14,
array_A[81]+array_A[8]+c15,
array_A[27]+array_A[83]+c16,
array_A[25]+array_A[85]+c17,
array_A[42]+array_A[87]+c18,
array_A[22]+array_A[89]+c19,
array_A[30]+array_A[91]+c20,
array_A[88]+array_A[93]+c21,
array_A[71]+array_A[95]+c22,
array_A[42]+array_A[97]+c23,
array_A[77]+array_A[99]+c24,
array_A[1]+array_A[14]+c25,
array_A[73]+array_A[3]+c26,
array_A[5]+array_A[13]+c27,
array_A[43]+array_A[7]+c28,
array_A[72]+array_A[9]+c29,
array_A[85]+array_A[11]+c30,
array_A[64]+array_A[13]+c31,
array_A[64]+array_A[15]+c32,
array_A[15]+array_A[17]+c33,
array_A[40]+array_A[19]+c34,
array_A[83]+array_A[21]+c35,
array_A[9]+array_A[23]+c36,
array_A[96]+array_A[25]+c37,
array_A[92]+array_A[27]+c38,
array_A[20]+array_A[29]+c39,
array_A[24]+array_A[31]+c40,
array_A[33]+array_A[36]+c41,
array_A[72]+array_A[35]+c42,
array_A[48]+array_A[37]+c43,
array_A[29]+array_A[39]+c44,
array_A[23]+array_A[41]+c45,
array_A[73]+array_A[43]+c46,
array_A[83]+array_A[45]+c47,
array_A[71]+array_A[47]+c48,
array_A[18]+array_A[49]+c49,
array_A[51]+array_A[52]+c50,
array_A[53]+array_A[21]+c51,
array_A[55]+array_A[77]+c52,
array_A[57]+array_A[92]+c53,
array_A[59]+array_A[85]+c54,
array_A[61]+array_A[38]+c55,
array_A[63]+array_A[47]+c56,
array_A[65]+array_A[69]+c57,
array_A[67]+array_A[96]+c58,
array_A[63]+array_A[69]+c59,
array_A[71]+array_A[54]+c60,
array_A[73]+array_A[53]+c61,
array_A[75]+array_A[28]+c62,
array_A[77]+array_A[35]+c63,
array_A[79]+array_A[51]+c64,
array_A[81]+array_A[28]+c65,
array_A[83]+array_A[88]+c66,
array_A[85]+array_A[66]+c67,
array_A[87]+array_A[18]+c68,
array_A[89]+array_A[21]+c69,
array_A[91]+array_A[45]+c70,
array_A[93]+array_A[35]+c71,
array_A[95]+array_A[9]+c72,
array_A[82]+array_A[97]+c73,
array_A[99]+array_A[45]+c74,
array_A[89]+array_A[1]+c75,
array_A[3]+array_A[55]+c76,
array_A[5]+array_A[23]+c77,
array_A[7]+array_A[55]+c78,
array_A[9]+array_A[75]+c79,
array_A[11]+array_A[20]+c80,
array_A[13]+array_A[15]+c81,
array_A[15]+array_A[38]+c82,
array_A[17]+array_A[24]+c83,
array_A[19]+array_A[29]+c84,
array_A[13]+array_A[21]+c85,
array_A[23]+array_A[51]+c86,
array_A[100]+array_A[25]+c87,
array_A[14]+array_A[27]+c88,
array_A[29]+array_A[86]+c89,
array_A[31]+array_A[47]+c90,
array_A[33]+array_A[53]+c91,
array_A[8]+array_A[35]+c92,
array_A[37]+array_A[54]+c93,
array_A[36]+array_A[39]+c94,
array_A[41]+array_A[75]+c95,
array_A[43]+array_A[86]+c96,
array_A[4]+array_A[45]+c97,
array_A[47]+array_A[66]+c98,
array_A[49]+array_A[99]+c99,
/***************************************************/
array_A[51]*array_B[1]+r99+R0,
c1*array_B[3]+r0+R1,
c2*array_B[5]+r1+R2,
c3*array_B[7]+r2+R3,
c4*array_B[9]+r3+R4,
c5*array_B[11]+r4+R5,
c6*array_B[13]+r5+R6,
c7*array_B[15]+r6+R7,
c8*array_B[17]+r7+R8,
c9*array_B[19]+r8+R9,
c10*array_B[21]+r9+R10,
c11*array_B[23]+r10+R11,
c12*array_B[25]+r11+R12,
c13*array_B[27]+r12+R13,
c14*array_B[29]+r13+R14,
c15*array_B[31]+r14+R15,
c16*array_B[33]+r15+R16,
c17*array_B[35]+r16+R17,
c18*array_B[37]+r17+R18,
c19*array_B[39]+r18+R19,
c20*array_B[41]+r19+R20,
c21*array_B[43]+r20+R21,
c22*array_B[45]+r21+R22,
c23*array_B[47]+r22+R23,
c24*array_B[49]+r23+R24,
c25*array_B[51]+r24+R25,
c26*array_B[53]+r25+R26,
c27*array_B[55]+r26+R27,
c28*array_B[57]+r27+R28,
c29*array_B[59]+r28+R29,
c30*array_B[61]+r29+R30,
c31*array_B[63]+r30+R31,
c32*array_B[65]+r31+R32,
c33*array_B[67]+r32+R33,
c34*array_B[69]+r33+R34,
c35*array_B[71]+r34+R35,
c36*array_B[73]+r35+R36,
c37*array_B[75]+r36+R37,
c38*array_B[77]+r37+R38,
c39*array_B[79]+r38+R39,
c40*array_B[81]+r39+R40,
c41*array_B[83]+r40+R41,
c42*array_B[85]+r41+R42,
c43*array_B[87]+r42+R43,
c44*array_B[89]+r43+R44,
c45*array_B[91]+r44+R45,
c46*array_B[93]+r45+R46,
c47*array_B[95]+r46+R47,
c48*array_B[97]+r47+R48,
c49*array_B[99]+r48+R49,
c50*array_B[1]+r49+R50,
c51*array_B[3]+r50+R51,
c52*array_B[5]+r51+R52,
c53*array_B[7]+r52+R53,
c54*array_B[9]+r53+R54,
c55*array_B[11]+r54+R55,
c56*array_B[13]+r55+R56,
c57*array_B[15]+r56+R57,
c58*array_B[17]+r57+R58,
c59*array_B[19]+r58+R59,
c60*array_B[21]+r59+R60,
c61*array_B[23]+r60+R61,
c62*array_B[25]+r61+R62,
c63*array_B[27]+r62+R63,
c64*array_B[29]+r63+R64,
c65*array_B[31]+r64+R65,
c66*array_B[33]+r65+R66,
c67*array_B[35]+r66+R67,
c68*array_B[37]+r67+R68,
c69*array_B[39]+r68+R69,
c70*array_B[41]+r69+R70,
c71*array_B[43]+r70+R71,
c72*array_B[45]+r71+R72,
c73*array_B[47]+r72+R73,
c74*array_B[49]+r73+R74,
c75*array_B[51]+r74+R75,
c76*array_B[53]+r75+R76,
c77*array_B[55]+r76+R77,
c78*array_B[57]+r77+R78,
c79*array_B[59]+r78+R79,
c80*array_B[61]+r79+R80,
c81*array_B[63]+r80+R81,
c82*array_B[65]+r81+R82,
c83*array_B[67]+r82+R83,
c84*array_B[69]+r83+R84,
c85*array_B[71]+r84+R85,
c86*array_B[73]+r85+R86,
c87*array_B[75]+r86+R87,
c88*array_B[77]+r87+R88,
c89*array_B[79]+r88+R89,
c90*array_B[81]+r89+R90,
c91*array_B[83]+r90+R91,
c92*array_B[85]+r91+R92,
c93*array_B[87]+r92+R93,
c94*array_B[89]+r93+R94,
c95*array_B[91]+r94+R95,
c96*array_B[93]+r95+R96,
c97*array_B[95]+r96+R97,
c98*array_B[97]+r97+R98,
c99*array_B[99]+r98+R99,
/***************************************************/
bigpoly_A, bigpoly_B, bigpoly_r, bigpoly_R;
	return (fastgb(r_in,I,I1,I2,I3));
}

proc arrayshift(ideal I, int s)
{
	ideal tmp;
	for(int j = 1; j <= s; j = j+1)
	{
		tmp[j] = I[((j+s-2) mod s) + 1];
	}
	return (tmp);
}

ring rr = (2,X),(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30,R31,R32,R33,R34,R35,R36,R37,R38,R39,R40,R41,R42,R43,R44,R45,R46,R47,R48,R49,R50,R51,R52,R53,R54,R55,R56,R57,R58,R59,R60,R61,R62,R63,R64,R65,R66,R67,R68,R69,R70,R71,R72,R73,R74,R75,R76,R77,R78,R79,R80,R81,R82,R83,R84,R85,R86,R87,R88,R89,R90,R91,R92,R93,R94,R95,R96,R97,R98,R99,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96,c97,c98,c99,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95,a96,a97,a98,a99,R,r,A,B),lp;
minpoly = X^100 + X^99 + X^98 + X^97 + X^96 + X^95 + X^94 + X^93 + X^92 + X^91 + X^90 + X^89 + X^88 + X^87 + X^86 + X^85 + X^84 + X^83 + X^82 + X^81 + X^80 + X^79 + X^78 + X^77 + X^76 + X^75 + X^74 + X^73 + X^72 + X^71 + X^70 + X^69 + X^68 + X^67 + X^66 + X^65 + X^64 + X^63 + X^62 + X^61 + X^60 + X^59 + X^58 + X^57 + X^56 + X^55 + X^54 + X^53 + X^52 + X^51 + X^50 + X^49 + X^48 + X^47 + X^46 + X^45 + X^44 + X^43 + X^42 + X^41 + X^40 + X^39 + X^38 + X^37 + X^36 + X^35 + X^34 + X^33 + X^32 + X^31 + X^30 + X^29 + X^28 + X^27 + X^26 + X^25 + X^24 + X^23 + X^22 + X^21 + X^20 + X^19 + X^18 + X^17 + X^16 + X^15 + X^14 + X^13 + X^12 + X^11 + X^10 + X^9 + X^8 + X^7 + X^6 + X^5 + X^4 + X^3 + X^2 + X + 1;

number beta = X;
int bSize = 100; // Note this is the size!!!!!!!!!!!!!!!!!!!

int i = 1;
ideal from, to;
ideal A_in = a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95,a96,a97,a98,a99;
ideal B_in = b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99;
ideal vec_r = r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99;
ideal vec_R = R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30,R31,R32,R33,R34,R35,R36,R37,R38,R39,R40,R41,R42,R43,R44,R45,R46,R47,R48,R49,R50,R51,R52,R53,R54,R55,R56,R57,R58,R59,R60,R61,R62,R63,R64,R65,R66,R67,R68,R69,R70,R71,R72,R73,R74,R75,R76,R77,R78,R79,R80,R81,R82,R83,R84,R85,R86,R87,R88,R89,R90,R91,R92,R93,R94,R95,R96,R97,R98,R99;


timer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t0=timer; // initialize t by timer

poly f0 = bigPoly_gen(A_in, beta, bSize);

poly f0_B = bigPoly_sub(A_in, B_in, f0, bSize, B);
poly f0_r = bigPoly_sub(A_in, vec_r, f0, bSize, r);
poly f0_R = bigPoly_sub(A_in, vec_R, f0, bSize, R);
vec_R = arrayshift(vec_R,bSize);
poly f0_R_last = bigPoly_sub(A_in, vec_R, f0, bSize, R);

ideal I1,I2,I3;
(I1,I2,I3) = preprocess(f0, A_in, B_in, vec_r);
int t1 = timer-t0; // time in ms
"Preprocess Done!";

from[1] = r;
for (i = 1; i < bSize; i= i+1)
{
	to[i+1] = tran(A_in, B_in, from[i], beta, I1, I2, I3, f0, f0_B, f0_r, f0_R);
	"Calc Done! This is iteration No.",i;
	A_in = arrayshift(A_in,bSize);
	B_in = arrayshift(B_in,bSize);
	"Shift Done!";
	from[i+1] = subst(to[i+1],R,r);
	"Subst Done!";
}
"I'm Out!";
//from[5];
to[i+1] = tran(A_in, B_in, from[i], beta, I1, I2, I3, f0, f0_B, f0_r, f0_R_last);
"Final Calc Done!";
to[i+1];

int t2 = timer - t1;
int tt= timer - t0;

"Pre-time:",t1;
"Loop-time:",t2;
"Total time:",tt;

string sfile = ":w "+string(bSize)+"bit.out";
link l=sfile;
string stmp1 = "Pre-time: "+string(t1)+"ms, Total time: "+string(tt)+"ms";
string stmp2 = "Result = "+string(to[bSize+1]);
write(l,stmp1);
write(l,stmp2);
close(l);

