#!/usr/bin/perl -w

use 5.014;
use strict;
use warnings;

open SING, ">", "89bitnew.sing"; # if you want keep all copies, change this filename

my $size = 89; # remember to change the size!!

#              1 0 8 6 8 4 5 3 9 3 7 2 9 5 10 1 2 4 6 7 10
#my @idx = qw /1 0 8 6 8 4 5 3 9 3 7 2 9 5 10 1 2 4 6 7 10/;
my @idx = qw /1 0 19 19 49 38 82 68 77 34 62 31 74 10 27 45 56 22 26 7 75 45 53 16 51 66 80 24 37 21 50 12 46 80 87 48 88 1 2 49 82 15 25 9 46 36 75 14 67 21 83 9 57 7 32 56 61 69 84 71 73 6 63 27 58 41 61 5 78 74 86 23 47 14 81 3 50 54 77 42 60 33 59 40 78 59 65 52 55 8 11 16 22 36 87 18 81 2 20 15 38 12 54 44 66 11 76 39 51 44 60 8 28 26 84 32 64 41 43 40 55 28 33 5 69 31 72 58 85 43 79 13 52 24 76 4 83 29 62 71 72 30 70 63 70 30 85 6 35 10 23 53 67 4 39 34 42 65 86 13 17 37 48 3 20 25 68 29 57 64 73 35 79 17 47 18 88/;

=thisismultiplicationtableof11bit
0 1 0 0 0 0 0 0 0 0 0 
1 0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 1 0 0 
0 0 0 0 1 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 1 0 
0 0 0 1 0 0 0 1 0 0 0 
0 0 1 0 0 0 0 0 0 1 0 
0 0 0 0 0 1 0 0 0 0 1 
0 1 1 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 1 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 1 
1 0 8 6 8 4 5 3 9 3 7 2 9 5 10 1 2 4 6 7 10
=cut
 
#print SING "/*\n";

#my $i,$j,$c,$rr,$R;
my $i = 1;
my $c = 1;
while($i < 2*($size-1)){  # correctness guarantee: currently for M^0 matrix, the first line always only has 1 entry
 printf SING "array_A[%d]+array_A[%d]+c%d,\n", ($idx[$i]+$c)%$size+1, ($idx[$i+1]+$c)%$size+1, $c;
 $i += 2;
 $c ++;
}
print SING "/***************************************************/\n";

printf SING ("array_A[%d]*array_B[1]+r%d+R0,\n", $idx[0]+1, $size-1); 
$i = 1; 
$c = 1;
while($i < $size){
 printf SING "c%d*array_B[%d]+r%d+R%d,\n", $c, ($i+$c)%$size+1, $c-1, $c;
 $i ++;
 $c ++;
}
print SING "/***************************************************/\n";

=bigpolynotneedanymore

$i = 1;
my $deg = 1;
#$c = 293;
#note we use a "number" var -- beta -- instead of accu. value
while($i <= $size){
  if($i == 1){
	printf SING "a%d*beta+", $i-1;
  }
  else{
  	printf SING "a%d*beta^%d+", $i-1, $deg;
  }
  $i ++;
  $deg = $deg*2;
}
print SING "A,\n";


$i = 1;
$deg = 1;
while($i <= $size){
  if($i == 1){
	printf SING "b%d*beta+", $i-1;
  }
  else{
  	printf SING "b%d*beta^%d+", $i-1, $deg;
  }
  $i ++;
  $deg = $deg*2;
}
print SING "B,\n";

$i = 1;
$deg = 1;
while($i <= $size){
  if($i == 1){
	printf SING "r%d*beta+", $i-1;
  }
  else{
  	printf SING "r%d*beta^%d+", $i-1, $deg;
  }
  $i ++;
  $deg = $deg*2;
}
print SING "r,\n";

$i = 1;
$deg = 1;
while($i <= $size){
  if($i == 1){
	printf SING "R%d*beta+", $i-1;
  }
  else{
  	printf SING "R%d*beta^%d+", $i-1, $deg;
  }
  $i ++;
  $deg = $deg*2;
}
print SING "R;\n";

print SING"\n\n\n\n************************(special one)**********************\n";
$i = 1;
$deg = 1;
while($i <= $size){
  if($i == 1){
	printf SING "R%d*beta+", $size-1;
  }
  else{
  	printf SING "R%d*beta^%d+", $i-2, $deg;
  }
  $i ++;
  $deg = $deg*2;
}
print SING "R;\n";

print SING "\n\n\n\n\n";
print SING "poly f0 = ";
$i = 1;
$deg = 1;
while($i <= $size){
  if($i == 1){
	printf SING "a%d*beta+", $i-1;
  }
  else{
  	printf SING "a%d*beta^%d+", $i-1, $deg;
  }
  $i ++;
  $deg = $deg*2;
}
print SING "A;\n";

#print SING "A^$deg+A, B^$deg+B, r^$deg+r, R^$deg+R,\n";
#print SING "r_in;\n";

=cut

print SING "ideal va = ";

for($i = 0; $i < $size; $i++){
  printf SING "a%d^2+a%d, ", $i, $i;
#  printf SING "b%d^2+b%d, ", $i, $i;
#  printf SING "r%d^2+r%d, ", $i, $i;
#  printf SING "R%d^2+R%d,\n", $i, $i;
}
#print SING "A^$deg+A;";

print SING "\n\n********************** ring var ***********************\n\n";
for($i=0;$i<$size;$i++)
{
  print SING "R$i,";
}
for($i=0;$i<$size;$i++)
{
  print SING "r$i,";
}
for($i=1;$i<$size;$i++)
{
  print SING "c$i,";
}
for($i=0;$i<$size;$i++)
{
  print SING "b$i,";
}
for($i=0;$i<$size;$i++)
{
  print SING "a$i,";
}
print SING "R,r,A,B\n";

print SING "\n\n********************** Word vectors ***********************\n\n";
print SING "ideal A_in = a0";
for($i=1;$i<$size;$i++)
{
  print SING ",a$i";
}
print SING ";\n";
print SING "ideal B_in = b0";
for($i=1;$i<$size;$i++)
{
  print SING ",b$i";
}
print SING ";\n";
print SING "ideal vec_r = r0";
for($i=1;$i<$size;$i++)
{
  print SING ",r$i";
}
print SING ";\n";
print SING "ideal vec_R = R0";
for($i=1;$i<$size;$i++)
{
  print SING ",R$i";
}
print SING ";\n";

print SING "\n\n************************** Min-poly ************************\n\n";
print SING "minpoly = ";
for($i=$size;$i>1;$i--){
  print SING "X^$i + ";
}
print SING "X + 1;\n";

close SING;
