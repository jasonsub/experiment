#include<iostream>
#include<fstream>
#include<stdlib.h>
#include<string>
#include "bcphead.h"

using namespace std;

/*******************************************************************************************************/
/**************************                Class Functions                ******************************/
/*******************************************************************************************************/

Matrix::Matrix(int x, int y)  //Construct new object, allocate memory, set column tag all to -1(unknown)
{
	m = x;
	n = y;
	noSolu = false;
	A = new int *[x];
	int *tmp = new int [x*y];
	for(int i = 0; i < x; i++)
		A[i] = &(tmp[i*y]);
	len = new int [x];
	col = new int [y];
	for(int j = 0; j < n; j++)
		col[j] = -1;
}

void Matrix::update_len()  //Update length of row, call this when finish intializing or setting up column tag
{
	for (int i = 0; i < m ; i++){
		if(len[i] == 0) continue; // Never update deleted rows
		int cnt = 0;
		for(int j = 0; j < n; j++){
			if( (A[i][j] != -1) && (col[j] == -1) ) // Count only if entries are available
				cnt++;
		}
		len[i] = cnt;
	}
}

Matrix::Matrix(const Matrix &s) // Copy-constructor, used for creating formal arguments
{
	m = s.m;
	n = s.n;
	noSolu = s.noSolu;
	int i,j;
	A = new int *[m];
	int *tmp = new int [m*n];
	for(i = 0; i < m; i++)
		A[i] = &(tmp[i*n]);
	len = new int [m];
	col = new int [n];
	for (i = 0; i < m; i++){  // Copy everything
		len[i] = s.rowLen(i);
		for (j = 0; j < n; j++)
			assign_A(i, j, s.read_A(i,j));
	}
	for(j = 0; j<n; j++)
		col[j] = s.xValue(j);
}

Matrix::~Matrix() // Release occupied memory
{
//	delete [] *A;
//	delete [] A;
//	delete [] len;
//	delete [] col;
}

void Matrix::assign_A(int x, int y, int value) // Only for initializing
{
	A[x][y] = value;
}

void Matrix::setColZero(int y)
{
	col[y] = 0;
	for (int i = 0; i < m; i++){ // Check any satisfied rows, delete them
		if(len[i] == 0) continue;
		if(A[i][y] == 0)
			deleteRow(i);
		else if((A[i][y] == 1) && (len[i] == 1)) // Once if you deleted the last state variable in a row,
			noSolu = true;						//there will be no solution satisfy this row			
	}
	update_len();
}

void Matrix::setColOne(int y)
{
	col[y] = 1;
	for (int i = 0; i < m; i++){ // Check any satisfied rows, delete them
		if(len[i] == 0) continue;
		if(A[i][y] == 1)
			deleteRow(i);
		else if((A[i][y] == 0) && (len[i] == 1))
			noSolu = true;
	}
	update_len();
}

void Matrix::deleteRow(int x) // delete a row
{
	len[x] = 0;
}

int Matrix::rowLen(int x) const // read row length
{
	return len[x];
}

int Matrix::xValue(int y) const // read column value
{
	return col[y];
}

int Matrix::read_A(int x, int y) const // read matrix entries
{
	return A[x][y];
}

bool Matrix::dom_R(int k, int i) // judge row dominance
{
	for(int j = 0; j < n; j++){
		if( col[j] != -1) continue;
		if( (A[i][j] != -1) && (A[i][j] != A[k][j]) )
			return false;
	}
	return true;
}

bool Matrix::dom_C(int j, int k) // judge column dominance
{
	for(int i = 0; i < m; i++){
		if( len[i] == 0) continue;
		if( (A[i][j] == -1) && (A[i][k] == 1) )
			return false;
		if( (A[i][j] == 0) && (A[i][k] != 0) )
			return false;
	}
	return true;
}
/*******************************************************************************************************/
/**************************               Global Functions                ******************************/
/*******************************************************************************************************/


bool empty(Matrix A) // is one matrix empty(no rows)?
{
	int cnt= 0;
	for(int i = 0; i< A.m; i++){
		if(A.rowLen(i) >0)
			cnt++;
	}
	if(cnt == 0) return true;
	return false;
}

bool equiv(Matrix A, Matrix B) // are two matrices equivalent?
{
	for (int i = 0; i < A.m; i++){
		if( A.rowLen(i) != B.rowLen(i) ) return false;
	}
	for (int j = 0; j < A.n; j++){
		if( A.xValue(j) != B.xValue(j) ) return false;
	}
	return true;
}

Matrix findEssential(Matrix A) // find essential rows, delete corresponding
{
	for(int i= 0; i < A.m; i++){
		if (A.rowLen(i) == 1){
			for (int j = 0; j < A.n; j++){
				if(A.xValue(j) != -1) continue;
				if(A.read_A(i,j) == 1)
					A.setColOne(j);
				if(A.read_A(i,j) == 0)
					A.setColZero(j);
			}
		}
	}
	return A;
}

Matrix rowDominance(Matrix A) // find row dominances and delete corresponding
{
	for(int i = 0; i < A.m - 1; i++){
		if(A.rowLen(i) == 0) continue;
		for(int j = i+1; j < A.m; j++){
			if(A.rowLen(j) == 0) continue;
			if( A.dom_R(i,j) ) {A.deleteRow(i); break;}
			else if ( A.dom_R(j,i) ) A.deleteRow(j);
		}
	}

	return A;
}

Matrix colDominance(Matrix A) // find column dominances and set them to 0
{
	for(int i = 0; i < A.n - 1; i++){
		if(A.xValue(i) != -1) continue;
		for(int j = i+1; j < A.n; j++){
			if(A.xValue(j) != -1) continue;
			if( A.dom_C(i,j) )
				A.setColZero(j);
			else if( A.dom_C(j,i) ){
				A.setColZero(i);
				break;
			}
		}
	}
	return A;
}

Matrix reduce(Matrix A) // Reduce a matrix
{
	Matrix B = A;
	while(1){
		A = findEssential(A);
		A = rowDominance(A);
		A = colDominance(A);
		if( empty(A) || equiv(A,B)) break;
		B = A;
	}
	
	return A;
}

Matrix deleteZero(Matrix A)
{
	for(int i = 0; i < A.m; i++){
		if(A.rowLen(i) == 0) continue;
		for(int j = 0; j < A.n; j++){
			if(A.xValue(j) != -1) continue;
			if(A.read_A(i,j) == 0){
				A.deleteRow(i);
				break;
			}
		}
	}
	return A;
}

Matrix MIS(Matrix A)
{
	int s_len = A.n;
	int s_row = 999;
	int j;
	for(j = 0; j < A.m; j++){  // find minimum
		if((A.rowLen(j) < s_len) && (A.rowLen(j) > 0)){
			s_len = A.rowLen(j);
			s_row = j;
		}
	}
	if(s_row == 999) return A;
	A.deleteRow(s_row);
	for(j = 0; j < A.n; j++){ // delete intersecting rows
		if(A.xValue(j) != -1) continue;
		if(A.read_A(s_row,j) == 1){
			for(int i = 0; i<A.m; i++){
				if(A.rowLen(i) == 0) continue;
				if(A.read_A(i,j) == 1) A.deleteRow(i);
			}
		}
	}
	return A;
}

int lowerBound(Matrix A)
{
	int lb = 0;
	for(int i = 0; i < A.n; i++){
		if(A.xValue(i) == 1)
			lb++;
	}
	A = deleteZero(A);
	while(! empty(A) ){
		A = MIS(A);
/*		for(int j = 0; j < A.m; j ++)
			cout<<A.rowLen(j)<<" ";
		cout<<endl;
*/		lb++;
	}
	return lb;
}

int cost(Matrix A)
{
	int cnt= 0;
	for(int j = 0; j < A.n; j++){
		if(A.xValue(j) == 1) cnt++;
	}
	return cnt;
}

bool infeasi(Matrix A)
{
	int n_rows = 0;
	int n_cols = 0;
	for(int i = 0; i < A.m; i++){
		if(A.rowLen(i) > 0) n_rows++;
	}
	for(int j = 0; j<A.n; j++){
		if(A.xValue(j) == -1) n_cols++;
	}
	if( (2^(n_cols)) == n_rows )
		return true;
	return false;
}

int chooseCol(Matrix A)
{
	int m = A.m;
	int n = A.n;
	int i;
	double *wt_row = new double [m];
	double *wt_col = new double [n];
	A = deleteZero(A);
	for(i = 0; i < m; i++){
		if(A.rowLen(i) == 0) wt_row[i] = 0;
		else
			wt_row[i] = 1.0/(double)A.rowLen(i);
	}

	int c;
	double zuida;

/*	cout<<"Weight: ";
	for(i=0;i<m;i++)
		cout<<wt_row[i]<<" ";
	cout<<endl;
*/
	for(int j = 0; j < n; j++){
		wt_col[j] = 0.0;   // initialize
		if(A.xValue(j) != -1) continue;
		for(int k = 0; k < m; k++){
			if(A.rowLen(k) == 0) continue;
			if(A.read_A(k,j) == 1)
				wt_col[j] += wt_row[k];
		}
	}



	zuida = 0.0;
	c = 0;
	for(int l = 0; l < n; l ++){
		if(A.xValue(l) != -1) continue;
		if(zuida < wt_col[l] ){
			zuida = (double)wt_col[l];
			c = l;
		}
	}

	delete [] wt_row;
	delete [] wt_col;
	return c;
}

Matrix my_bcp(Matrix A, Matrix Ap)
{
	A = reduce(A);
	
	int L = lowerBound(A);
	cout<<"Lower bound: "<<L<<endl;

	if(L >= cost(Ap)) return Ap;
	if(A.noSolu){
		cout<<"No solution!"<<endl;
		return Ap;
	}
	else if(empty(A)){
		cout<<"Solved!"<<endl;
		return A;
	}
	else if(infeasi(A)){
		cout<<"Infeasible!"<<endl;
		return Ap;
	}

	int c = chooseCol(A);
	cout<<"brach at Column "<<c+1<<endl;
	Matrix A_1 = A;
	A_1.setColOne(c);
	cout<<"take 1"<<endl;
	A_1 = my_bcp(A_1, Ap);
	if(cost(A_1) < cost(Ap)){
		Ap = A_1;
		if(cost(Ap) == L) return Ap;
	}
	Matrix A_0 = A;
	A_0.setColZero(c);
	cout<<"take 0"<<endl;
	A_0 = my_bcp(A_0, Ap);
	if(cost(A_0) < cost(Ap) ) Ap = A_0;
	return Ap;

//	return A;
}

int main()
{
	char infile[40];
	char outfile[40];
	cout<<"Enter name of input file: ";
	cin>>infile;
	cout<<"Enter name of output file: ";
	cin>>outfile;

	ifstream fin(infile);
	if(fin.rdstate() == ios::failbit){
       cout << "Non-fatal I/O error!\n"<<endl;
	   exit(1);
	}
	string tmp, entries;
	int m,n;
	int i,j;
	char names[100][20];
	while(!fin.eof()){
		fin>>tmp;
		if(tmp == ".rows")
			fin>>m;
		if(tmp == ".cols"){
			fin>>n;
			break;
		}
	}
	Matrix A(m,n);
	Matrix Ap(m,n);
	while(!fin.eof()){
		fin>>tmp;
		if(tmp == ".names"){
			for(j = 0; j < n; j++)
				fin>>names[j];
			for( i = 0; i < m; i++){
				for(j = 0; j < n; j++){
					fin>>entries;
					if(entries == "1") A.assign_A(i,j,1);
					else if(entries == "0") A.assign_A(i,j,0);
					else A.assign_A(i,j,-1);
				}
			}
		}
		if(tmp == ".e") break;
	}
	fin.close();
	A.update_len();

	for(j = 0; j < n; j++) // Initialize the reference result
		Ap.setColOne(j);

	Matrix B = my_bcp(A,Ap);
	for(i=0;i<m;i++){
		for(j=0;j<n;j++)
			cout<<B.read_A(i,j)<<" ";
		cout<<endl;
	}
	for(j=0;j<n;j++)
		cout<<B.xValue(j)<<" ";
	cout<<endl;
	for(i=0;i<m;i++)
		cout<<B.rowLen(i)<<" ";


	ofstream SaveFile(outfile);
	if(cost(B) == n)
		SaveFile<<"No proper solution to this problem.";
	else{
		for(j = 0; j < n; j++){
			if(B.xValue(j) == 1)
				SaveFile<<names[j]<<" ";
		}
	}
	SaveFile.close();
	return 0;
}