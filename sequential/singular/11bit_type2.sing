LIB "teachstd.lib";
LIB "general.lib";
LIB "poly.lib";

proc multidiv(poly f, ideal I)
{
	poly p = f;
	poly r,fi = 0,0;
	ideal J;
	int s = size(I);
	J[s] = 0;
	int i, divmark;
	while (lead(p) != 0)
	{
		i = 1;
		divmark = 0;
		while (i <= s and divmark == 0)
		{
			fi = I[i];
			if(lead(p)/lead(fi) != 0)
			{
				J[i] = J[i] + lead(p)/lead(fi);
				p = p - lead(p)/lead(fi)*fi;
				divmark = 1;
			}
			else
			{
				i = i+1;
			}
		}
		if (divmark == 0)
		{
			r = r + lead(p);
			p = p - lead(p);
		}
	}
	return (r);  // Note this is a little different return value, only the remainder!!!!!!
}

proc bigPoly_gen(ideal A_in, number beta, int n)
{
  int i =2;
  poly f =  A + a0*beta;
  while(n>1)
  {
	beta = beta^2;
	f = f + A_in[i]*beta;
	n = n-1;
	i = i+1;
  }
  return (f);
}

proc bigPoly_sub(ideal A_in, ideal S, poly f, int n, poly w)
{
  int i;
  f = subst(f,A,w);
  for(i=1;i<=n;i=i+1)
  {
	f = subst(f,A_in[i],S[i]);
  }
  return (f);
}
/*
proc mysubst(poly f, poly rs, poly w)
{
  poly g=0;
  poly t;
  number c;
  int k;
  while(lead(f) != 0)
  {
	t = lead(f);
	f = f - t;
	if(t/rs != 0)
	{
	  c = leadcoef(t);
	  k = deg(t);
	  t = c*(w^k);
	}
	g = g + t;
  }
  return (g);
}

proc mysubst_ideal(ideal I, poly rs, poly w)
{
  int n = size(I);
  int i;
  for(i=1;i<=n;i=i+1)
  {
	I[i] = mysubst(I[i],rs,w);
  }
  return (I);
}
*/

proc bigNumPower(number c, int k)
{
  if(k==0)
  {
	return (c);
  }
  while(k>0)
  {
	c = c^2;
	k=k-1;
  }
  return (c);
}

proc getpower(poly f, poly rs)
{
  int i = 0;
  while (f/rs != 0)
  {
	i = i+1;
	f = f/rs;
  }
  return (i);
}

proc power_spec(poly f, int k, int n)
{
  poly g=0;
  number c;
  poly t;
  int ka;
  int kb;
  while(lead(f) != 0)
  {
	t = lead(f);
	f = f-t;
	ka = getpower(t,A);
	kb = deg(t) - ka;
	c = leadcoef(t);
	t = bigNumPower(c,k-1);  /***********  This line need to be strengthen when k is big  **********/
	ka = ((ka+k-2) mod n) + 1;
	kb = ((kb+k-2) mod n) + 1;
	t =t*A^ka*B^kb;
	g = g+t;
  }
  return (g);
}

proc subst_spec(poly f, poly rs, poly w, int n)
{
  poly g=0;
  number c;
  poly t;
  int outer_k;
  while(lead(f) != 0)
  {
	t = lead(f);
	f = f - t;
	if(t/rs != 0)
	{
	  c = leadcoef(t);
	  outer_k = deg(t);
	  t = power_spec(w,outer_k,n);
	  t = t*c;
	}
	g =g + t;
  }
  return (g);
}

proc conv_word(poly origin, poly last_poly, ideal red_A, ideal red_B, ideal red_r) /* last_poly is r + g(A,B) */
{
  int n = size(red_A);
  int i;
//  ideal word_red = A^(2^n)+A, B^(2^n)+B; // Note: How to present large as 2^233 ??
  for(i = 1; i <= n; i = i + 1)
  {
	origin = subst(origin, lead(red_A[i]), red_A[i] - lead(red_A[i]));
	origin = subst(origin, lead(red_B[i]), red_B[i] - lead(red_B[i]));
	origin = subst(origin, lead(red_r[i]), red_r[i] - lead(red_r[i]));
  }
  origin = subst_spec(origin, r, last_poly - r, n);
//  origin = multidiv(origin,word_red); // Note: Any trick to reduce ultra high order Word-level terms ??
  return(origin/leadcoef(origin));
}

proc preprocess(poly f0, ideal vec_A, ideal vec_B, ideal vec_r)
{
  int len = size(vec_A);
  ideal result;
  poly f1,f2;
  f2 = f0;
  int i = 1;
  int j;
  result[1] = f0/leadcoef(f0);
  poly t;
  poly temp;
  number c;

  for(i = 1; i < len; i= i+1)
  {
	f0 = f2;
	f1 = 0;
	while(lead(f0) != 0)
	{
	  t = lead(f0);
	  f0 = f0 - t;
	  c = leadcoef(t);
	  temp = t/c;
	  c = c*c;
	  temp = temp*c;
	  if(t/A != 0)
	  {
		temp = temp * A;
	  }
	  f1 = f1 + temp;
	}
	f2 = f1 + f2*leadcoef(f1)/leadcoef(f2);
	result[i+1] = f2/leadcoef(f2);
  }
  
  poly tobesub;

  for(i = len; i > 1; i= i-1)
  {
	tobesub = lead(result[i]);
	temp = result[i]-tobesub;
	for(j = i-1; j >= 1; j = j - 1)
	{
	  result[j] = subst(result[j], tobesub, temp);
	}
  }
  
  /* This need to be revise bitwise */
  /*  ideal result_B = subst(result, a0, b0, a1, b1, a2, b2, a3, b3, a4, b4, A, B);
  ideal result_r = subst(result, a0, r0, a1, r1, a2, r2, a3, r3, a4, r4, A, r);  */

  ideal result_B = result;
  ideal result_r = result;
  for(i = 1; i <= len; i=i+1)
  {
	result_B[i] = result_B[i] - vec_A[i] + vec_B[i]; /* because only leadmonom is a single bit var */
	result_r[i] = result_r[i] - vec_A[i] + vec_r[i];
  }
  
//  result_B[1];
  
  result_B = subst(result_B, A, B);
  result_r = subst(result_r, A, r);
  
  return (result,result_B,result_r);
}

proc findspoly(ideal J)
{
  ideal J0 = sort(J)[1];
  poly f1 = J0[size(J)];
  poly f2 = J0[size(J)-1];
  poly sp = spoly(f1,f2);
  poly rem;
  rem = multidiv(sp,J);   /* This is where F4-reduction can be used */
  return (rem/leadcoef(rem));
}

proc fastgb(poly r_in, ideal I0, ideal I1, ideal I2, ideal I3)
{
  poly spoly1 = findspoly(I0);
  return (conv_word(spoly1, r_in, I1, I2, I3));
}

proc tran(ideal array_A, ideal array_B, poly r_in, number beta, ideal I1, ideal I2, ideal I3, poly bigpoly_A, poly bigpoly_B, poly bigpoly_r, poly bigpoly_R)
{ 
  ideal I = array_A[2]+array_A[10]+c1,
	array_A[9]+array_A[11]+c2,
	array_A[8]+array_A[9]+c3,
	array_A[8]+array_A[3]+c4,
	array_A[9]+array_A[2]+c5,
	array_A[9]+array_A[5]+c6,
	array_A[2]+array_A[7]+c7,
	array_A[10]+array_A[11]+c8,
	array_A[3]+array_A[5]+c9,
	array_A[7]+array_A[10]+c10,
/***************************************************/
	array_A[2]*array_B[1]+r10+R0,
	c1*array_B[3]+r0+R1,
	c2*array_B[5]+r1+R2,
	c3*array_B[7]+r2+R3,
	c4*array_B[9]+r3+R4,
	c5*array_B[11]+r4+R5,
	c6*array_B[2]+r5+R6,
	c7*array_B[4]+r6+R7,
	c8*array_B[6]+r7+R8,
	c9*array_B[8]+r8+R9,
	c10*array_B[10]+r9+R10,
/***************************************************/
bigpoly_A, bigpoly_B, bigpoly_r, bigpoly_R;
	return (fastgb(r_in,I,I1,I2,I3));
}

proc arrayshift(ideal I, int s)
{
	ideal tmp;
	for(int j = 1; j <= s; j = j+1)
	{
		tmp[j] = I[((j+s-2) mod s) + 1];
	}
	return (tmp);
}

ring rr = (2,X),(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,R,r,A,B),lp;
minpoly = X^11+X^10+X^8+X^4+X^3+X^2+1;

number beta = X;
int bSize = 11; // Note this is the size!!!!!!!!!!!!!!!!!!!

int i = 1;
ideal from, to;
ideal A_in = a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10;
ideal B_in = b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10;
ideal vec_r = r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
ideal vec_R = R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10;


timer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t0=timer; // initialize t by timer

poly f0 = bigPoly_gen(A_in, beta, bSize);

poly f0_B = bigPoly_sub(A_in, B_in, f0, bSize, B);
poly f0_r = bigPoly_sub(A_in, vec_r, f0, bSize, r);
poly f0_R = bigPoly_sub(A_in, vec_R, f0, bSize, R);
vec_R = arrayshift(vec_R,bSize);
poly f0_R_last = bigPoly_sub(A_in, vec_R, f0, bSize, R);

ideal I1,I2,I3;
(I1,I2,I3) = preprocess(f0, A_in, B_in, vec_r);
int t1 = timer-t0; // time in ms
"Preprocess Done!";

from[1] = r;
for (i = 1; i < bSize; i= i+1)
{
	to[i+1] = tran(A_in, B_in, from[i], beta, I1, I2, I3, f0, f0_B, f0_r, f0_R);
	"Calc Done! This is iteration No.",i;
	A_in = arrayshift(A_in,bSize);
	B_in = arrayshift(B_in,bSize);
	"Shift Done!";
	from[i+1] = subst(to[i+1],R,r);
	"Subst Done!";
}
"I'm Out!";
//from[5];
to[i+1] = tran(A_in, B_in, from[i], beta, I1, I2, I3, f0, f0_B, f0_r, f0_R_last);
"Final Calc Done!";
to[i+1];

int t2 = timer - t1;
int tt= timer - t0;

"Pre-time:",t1;
"Loop-time:",t2;
"Total time:",tt;

string sfile = ":w "+string(bSize)+"bit.out";
link l=sfile;
string stmp1 = "Pre-time: "+string(t1)+"ms, Total time: "+string(tt)+"ms";
string stmp2 = "Result = "+string(to[bSize+1]);
write(l,stmp1);
write(l,stmp2);
close(l);

