LIB "general.lib";
LIB "poly.lib";

proc spoly (poly f, poly g)
{
	poly M = lcm(leadmonom(f),leadmonom(g));
	poly S = M/lead(f)*f - M/lead(g)*g;
	return (S);
}

proc multidiv(poly f, ideal I)
{
	poly p = f;
	poly fi,r = 0,0;
	ideal J;
	int s = size(I);
	J[s] = 0;
	int i, divmark;
	while (lead(p) != 0)
	{
		i = 1;
		divmark = 0;
		while (i <= s and divmark == 0)
		{
			fi = I[i];
			if(lead(p)/lead(fi) != 0)
			{
				J[i] = J[i] + lead(p)/lead(fi);
				p = p - lead(p)/lead(fi)*fi;
				divmark = 1;
			}
			else
			{
				i = i+1;
			}
		}
		if (divmark == 0)
		{
			r = r + lead(p);
			p = p - lead(p);
		}
	}
	return (r, J);
}

proc myGB(ideal F)
{
	ideal G = F;
	ideal G0, q;
	int n, i, j = size(F), 1, 1;
	poly r;
	while(1)
	{
		G0 = G;
		n = size(G0);
		for (i=1; i<n; i=i+1)
		{
			for (j=i+1; j<=n; j=j+1)
			{
				r = spoly(G0[i], G0[j]);
				r,q = multidiv(r,G0);
				if (lead(r) != 0)
				{
					G[n+1] = r;
				}
			}
		}
		if (size(G) == size(G0))
		{
			break;
		}
	}
	return (G);
}

proc miniGB(ideal G0)
{
	int s = size(G0);
	int i;
	int j;
	int k;
	for (i = 1; i <= s; i = i + 1)
	{
		for (j = 1; j <= s; j = j +1)
		{
			if (lead(G0[j]) != 0)
			{
				if (lead(G0[i])/lead(G0[j]) != 0 and i != j)
				{G0[i] = 0;}
			}
		}
	}
	ideal G = sort(G0)[1];
	s = size(G);
	for (k = 1; k <= s; k = k + 1)
	{
		G[k] = G[k]/leadcoef(G[k]);
	}
	return (G);
}

proc myRGB(ideal G0)
{
	int s = size(G0);
	poly h0;
	ideal q0,H;
	for (int i = 1; i <= s; i = i + 1)
	{
		ideal F = G0;
		F[i] = 0;
		H = sort(F)[1];
		h0,q0 = multidiv(G0[i],H);
		G0[i] = h0;
	}
	return (G0);
}

ring Q = 4, (a1,a0,y1,y0,Y,A), lp;
ideal f = A-a0-2*a1,Y-y0-2*y1,a0^2-a0,a1^2-a1,y0^2-y0,y1^2-y1,y1,y0-a1;
ideal G0 = myGB(f);
ideal mG = miniGB(G0);
ideal G = myRGB(mG);
"Groebner Basis:";
G0;
"Minimum Groebner Basis:";
mG;
"Reduced Groebner Basis:";
G;
