#!/usr/bin/Singular-64


ring rr = (2,X), (a,b,c), lp;
// minpoly = X^33 + X^27 + X^20 + X^19 + X^17 + X^11 + X^5 + X + 1;
minpoly = X^11 + X^7 + X^3 + X^2 + 1;

// intvec v = 1,0,6,6,15,12,23,21,31,14,32,1,2,15,23,19,26,28,30,13,17,22,25,3,16,10,31,5,22,2,7,12,26,10,29,20,25,8,24,18,30,4,24,11,14,3,7,19,21,11,18,8,16,28,29,9,27,17,27,9,20,4,13,5,32;

/*
intvec v = 1,0,3,3,4,1,2,2,4;
*/

intvec v = 1, 0, 8, 6, 8, 4, 5, 3, 9, 3, 7, 2, 9, 5, 10, 1, 2, 4, 6, 7, 10;

int i = 0;
int j = 1;
bigint k = 2^11;
int flag = 0;

k;

number b = X;

for (k = 1; k <= 2047; k = k+1){
  b = b*X;
  flag = 1;
  for (j = 1; j <= 10; j = j+1){
    if ( b^(2^j + 1) != (b^(2^v[2*j]) + b^(2^v[2*j+1])) )
    {/*b^(2^j + 1);*/ flag = 0; break;}
  }
  if (flag == 1)
  {"Found!"; k+1;}
}
quit;
