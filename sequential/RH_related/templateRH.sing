/* Singular script to verify RH multiplier */

LIB "teachstd.lib";

proc multidiv(poly f, ideal I)
{
	poly p = f;
	poly r,fi = 0,0;
	ideal J;
	int s = size(I);
	J[s] = 0;
	int i, divmark;
	while (lead(p) != 0)
	{
		i = 1;
		divmark = 0;
		while (i <= s and divmark == 0)
		{
			fi = I[i];
			if(lead(p)/lead(fi) != 0)
			{
				J[i] = J[i] + lead(p)/lead(fi);
				p = p - lead(p)/lead(fi)*fi;
				divmark = 1;
			}
			else
			{
				i = i+1;
			}
		}
		if (divmark == 0)
		{
			r = r + lead(p);
			p = p - lead(p);
		}
	}
	return (r); 
}

proc bigPoly_gen(ideal A_in, number beta, int n)
{
  int i =2;
  poly f =  A + a0*beta;
  while(n>1)
  {
	beta = beta^2;
	f = f + A_in[i]*beta;
	n = n-1;
	i = i+1;
  }
  return (f);
}

proc bigPoly_sub(ideal A_in, ideal S, poly f, int n, poly w)
{
  int i;
  f = subst(f,A,w);
  for(i=1;i<=n;i=i+1)
  {
	f = subst(f,A_in[i],S[i]);
  }
  return (f);
}

proc bigNumPower(number c, int k)
{
  if(k==0)
  {
	return (c);
  }
  while(k>0)
  {
	c = c^2;
	k=k-1;
  }
  return (c);
}

proc getpower(poly f, poly rs)
{
  int i = 0;
  while (f/rs != 0)
  {
	i = i+1;
	f = f/rs;
  }
  return (i);
}

proc power_spec(poly f, int k, int n)
{
  poly g=0;
  number c;
  poly t;
  int ka;
  int kb;
  while(lead(f) != 0)
  {
	t = lead(f);
	f = f-t;
	ka = getpower(t,A);
	kb = deg(t) - ka;
	c = leadcoef(t);
	t = bigNumPower(c,k-1); 
	ka = ((ka+k-2) mod n) + 1;
	kb = ((kb+k-2) mod n) + 1;
	t =t*A^ka*B^kb;
	g = g+t;
  }
  return (g);
}

proc subst_spec(poly f, poly rs, poly w, int n)
{
  poly g=0;
  number c;
  poly t;
  int outer_k;
  while(lead(f) != 0)
  {
	t = lead(f);
	f = f - t;
	if(t/rs != 0)
	{
	  c = leadcoef(t);
	  outer_k = deg(t);
	  t = power_spec(w,outer_k,n);
	  t = t*c;
	}
	g =g + t;
  }
  return (g);
}

proc conv_word(poly origin, poly last_poly, ideal red_A, ideal red_B, ideal red_r) /* last_poly is r + g(A,B) */
{
  int n = size(red_A);
  int i;
  for(i = 1; i <= n; i = i + 1)
  {
	origin = subst(origin, lead(red_A[i]), red_A[i] - lead(red_A[i]));
	origin = subst(origin, lead(red_B[i]), red_B[i] - lead(red_B[i]));
	origin = subst(origin, lead(red_r[i]), red_r[i] - lead(red_r[i]));
  }
  origin = subst_spec(origin, r, last_poly - r, n);
  return(origin/leadcoef(origin));
}

proc preprocess(poly f0, ideal vec_A, ideal vec_B, ideal vec_r)
{
  int len = size(vec_A);
  ideal result;
  poly f1,f2;
  f2 = f0;
  int i = 1;
  int j;
  result[1] = f0/leadcoef(f0);
  poly t;
  poly temp;
  number c;

  for(i = 1; i < len; i= i+1)
  {
	f0 = f2;
	f1 = 0;
	while(lead(f0) != 0)
	{
	  t = lead(f0);
	  f0 = f0 - t;
	  c = leadcoef(t);
	  temp = t/c;
	  c = c*c;
	  temp = temp*c;
	  if(t/A != 0)
	  {
		temp = temp * A;
	  }
	  f1 = f1 + temp;
	}
	f2 = f1 + f2*leadcoef(f1)/leadcoef(f2);
	result[i+1] = f2/leadcoef(f2);
  }
  
  poly tobesub;

  for(i = len; i > 1; i= i-1)
  {
	tobesub = lead(result[i]);
	temp = result[i]-tobesub;
	for(j = i-1; j >= 1; j = j - 1)
	{
	  result[j] = subst(result[j], tobesub, temp);
	}
  }
  

  ideal result_B = result;
  ideal result_r = result;
  for(i = 1; i <= len; i=i+1)
  {
	result_B[i] = result_B[i] - vec_A[i] + vec_B[i]; /* because only leadmonom is a single bit var */
	result_r[i] = result_r[i] - vec_A[i] + vec_r[i];
  }
  
  
  result_B = subst(result_B, A, B);
  result_r = subst(result_r, A, r);
  
  return (result,result_B,result_r);
}

proc findspoly(ideal J)
{
  ideal J0 = sort(J)[1];
  poly f1 = J0[size(J)];
  poly f2 = J0[size(J)-1];
  poly sp = spoly(f1,f2);
  poly rem;
  rem = multidiv(sp,J);   /* This is where F4-reduction can be used */
  return (rem/leadcoef(rem));
}

proc fastgb(poly r_in, ideal I0, ideal I1, ideal I2, ideal I3)
{
  poly spoly1 = findspoly(I0);
  return (conv_word(spoly1, r_in, I1, I2, I3));
}

proc tran(ideal array_A, ideal array_B, poly r_in, number beta, ideal I1, ideal I2, ideal I3, poly bigpoly_A, poly bigpoly_B, poly bigpoly_r, poly bigpoly_R)
{ 
  /* System description poly here */

ideal I = d0+array_A[105]*array_B[105],
c1+array_A[105]+array_A[1],
c2+array_B[105]+array_B[1],
d1+c1*c2,
c3+array_A[105]+array_A[2],
c4+array_B[105]+array_B[2],
d2+c3*c4,
c5+array_A[105]+array_A[3],
c6+array_B[105]+array_B[3],
d3+c5*c6,
c7+array_A[105]+array_A[4],
c8+array_B[105]+array_B[4],
d4+c7*c8,
c9+array_A[105]+array_A[5],
c10+array_B[105]+array_B[5],
d5+c9*c10,
c11+array_A[105]+array_A[6],
c12+array_B[105]+array_B[6],
d6+c11*c12,
c13+array_A[105]+array_A[7],
c14+array_B[105]+array_B[7],
d7+c13*c14,
c15+array_A[105]+array_A[8],
c16+array_B[105]+array_B[8],
d8+c15*c16,
c17+array_A[105]+array_A[9],
c18+array_B[105]+array_B[9],
d9+c17*c18,
c19+array_A[105]+array_A[10],
c20+array_B[105]+array_B[10],
d10+c19*c20,
c21+array_A[105]+array_A[11],
c22+array_B[105]+array_B[11],
d11+c21*c22,
c23+array_A[105]+array_A[12],
c24+array_B[105]+array_B[12],
d12+c23*c24,
c25+array_A[105]+array_A[13],
c26+array_B[105]+array_B[13],
d13+c25*c26,
c27+array_A[105]+array_A[14],
c28+array_B[105]+array_B[14],
d14+c27*c28,
c29+array_A[105]+array_A[15],
c30+array_B[105]+array_B[15],
d15+c29*c30,
c31+array_A[105]+array_A[16],
c32+array_B[105]+array_B[16],
d16+c31*c32,
c33+array_A[105]+array_A[17],
c34+array_B[105]+array_B[17],
d17+c33*c34,
c35+array_A[105]+array_A[18],
c36+array_B[105]+array_B[18],
d18+c35*c36,
c37+array_A[105]+array_A[19],
c38+array_B[105]+array_B[19],
d19+c37*c38,
c39+array_A[105]+array_A[20],
c40+array_B[105]+array_B[20],
d20+c39*c40,
c41+array_A[105]+array_A[21],
c42+array_B[105]+array_B[21],
d21+c41*c42,
c43+array_A[105]+array_A[22],
c44+array_B[105]+array_B[22],
d22+c43*c44,
c45+array_A[105]+array_A[23],
c46+array_B[105]+array_B[23],
d23+c45*c46,
c47+array_A[105]+array_A[24],
c48+array_B[105]+array_B[24],
d24+c47*c48,
c49+array_A[105]+array_A[25],
c50+array_B[105]+array_B[25],
d25+c49*c50,
c51+array_A[105]+array_A[26],
c52+array_B[105]+array_B[26],
d26+c51*c52,
c53+array_A[105]+array_A[27],
c54+array_B[105]+array_B[27],
d27+c53*c54,
c55+array_A[105]+array_A[28],
c56+array_B[105]+array_B[28],
d28+c55*c56,
c57+array_A[105]+array_A[29],
c58+array_B[105]+array_B[29],
d29+c57*c58,
c59+array_A[105]+array_A[30],
c60+array_B[105]+array_B[30],
d30+c59*c60,
c61+array_A[105]+array_A[31],
c62+array_B[105]+array_B[31],
d31+c61*c62,
c63+array_A[105]+array_A[32],
c64+array_B[105]+array_B[32],
d32+c63*c64,
c65+array_A[105]+array_A[33],
c66+array_B[105]+array_B[33],
d33+c65*c66,
c67+array_A[105]+array_A[34],
c68+array_B[105]+array_B[34],
d34+c67*c68,
c69+array_A[105]+array_A[35],
c70+array_B[105]+array_B[35],
d35+c69*c70,
c71+array_A[105]+array_A[36],
c72+array_B[105]+array_B[36],
d36+c71*c72,
c73+array_A[105]+array_A[37],
c74+array_B[105]+array_B[37],
d37+c73*c74,
c75+array_A[105]+array_A[38],
c76+array_B[105]+array_B[38],
d38+c75*c76,
c77+array_A[105]+array_A[39],
c78+array_B[105]+array_B[39],
d39+c77*c78,
c79+array_A[105]+array_A[40],
c80+array_B[105]+array_B[40],
d40+c79*c80,
c81+array_A[105]+array_A[41],
c82+array_B[105]+array_B[41],
d41+c81*c82,
c83+array_A[105]+array_A[42],
c84+array_B[105]+array_B[42],
d42+c83*c84,
c85+array_A[105]+array_A[43],
c86+array_B[105]+array_B[43],
d43+c85*c86,
c87+array_A[105]+array_A[44],
c88+array_B[105]+array_B[44],
d44+c87*c88,
c89+array_A[105]+array_A[45],
c90+array_B[105]+array_B[45],
d45+c89*c90,
c91+array_A[105]+array_A[46],
c92+array_B[105]+array_B[46],
d46+c91*c92,
c93+array_A[105]+array_A[47],
c94+array_B[105]+array_B[47],
d47+c93*c94,
c95+array_A[105]+array_A[48],
c96+array_B[105]+array_B[48],
d48+c95*c96,
c97+array_A[105]+array_A[49],
c98+array_B[105]+array_B[49],
d49+c97*c98,
c99+array_A[105]+array_A[50],
c100+array_B[105]+array_B[50],
d50+c99*c100,
c101+array_A[105]+array_A[51],
c102+array_B[105]+array_B[51],
d51+c101*c102,
c103+array_A[105]+array_A[52],
c104+array_B[105]+array_B[52],
d52+c103*c104,
d0+d1+e0,
d43+e1,
d27+d43+e2,
d34+e3,
d10+e5,
d15+e6,
d18+e7,
d22+e8,
d5+e10,
d15+e11,
d50+e13,
d6+d11+e15,
d30+e17,
d7+e18,
d22+d47+e19,
d46+e21,
d8+d19+e22,
d36+d40+e24,
d33+d42+e26,
d2+d44+e27,
d49+e29,
d17+e30,
d41+e32,
d26+e33,
d3+d44+e34,
d39+e35,
d24+e36,
d35+d45+e39,
d24+e40,
d32+e41,
d26+e42,
d1+d2+e43,
d27+d34+e44,
d39+e45,
d21+e46,
d19+e47,
d29+e49,
d13+e50,
d20+d23+e53,
d40+d46+e54,
d32+e55,
d38+e56,
d28+d45+e57,
d21+e58,
d8+e59,
d12+e60,
d14+e65,
d6+e66,
d18+d31+e67,
d47+e68,
d38+e69,
d4+d35+e70,
d10+e71,
d52+e72,
d9+d23+e73,
d36+e74,
d52+e75,
d20+d48+e76,
d29+e77,
d17+e78,
d7+d16+e79,
d12+d16+e81,
d30+d50+e82,
d25+d37+e84,
d33+e85,
d3+d28+e86,
d49+e87,
d13+e88,
d51+e91,
d37+e92,
d48+e93,
d4+e94,
d14+d51+e97,
d11+e98,
d9+e99,
d5+e100,
d31+e102,
d25+d41+e103,
d42+e104,
e0+r104+R0,
e1+r0+R1,
e2+r1+R2,
e3+r2+R3,
r3+R4,
e5+r4+R5,
e6+r5+R6,
e7+r6+R7,
e8+r7+R8,
r8+R9,
e10+r9+R10,
e11+r10+R11,
r11+R12,
e13+r12+R13,
r13+R14,
e15+r14+R15,
r15+R16,
e17+r16+R17,
e18+r17+R18,
e19+r18+R19,
r19+R20,
e21+r20+R21,
e22+r21+R22,
r22+R23,
e24+r23+R24,
r24+R25,
e26+r25+R26,
e27+r26+R27,
r27+R28,
e29+r28+R29,
e30+r29+R30,
r30+R31,
e32+r31+R32,
e33+r32+R33,
e34+r33+R34,
e35+r34+R35,
e36+r35+R36,
r36+R37,
r37+R38,
e39+r38+R39,
e40+r39+R40,
e41+r40+R41,
e42+r41+R42,
e43+r42+R43,
e44+r43+R44,
e45+r44+R45,
e46+r45+R46,
e47+r46+R47,
r47+R48,
e49+r48+R49,
e50+r49+R50,
r50+R51,
r51+R52,
e53+r52+R53,
e54+r53+R54,
e55+r54+R55,
e56+r55+R56,
e57+r56+R57,
e58+r57+R58,
e59+r58+R59,
e60+r59+R60,
r60+R61,
r61+R62,
r62+R63,
r63+R64,
e65+r64+R65,
e66+r65+R66,
e67+r66+R67,
e68+r67+R68,
e69+r68+R69,
e70+r69+R70,
e71+r70+R71,
e72+r71+R72,
e73+r72+R73,
e74+r73+R74,
e75+r74+R75,
e76+r75+R76,
e77+r76+R77,
e78+r77+R78,
e79+r78+R79,
r79+R80,
e81+r80+R81,
e82+r81+R82,
r82+R83,
e84+r83+R84,
e85+r84+R85,
e86+r85+R86,
e87+r86+R87,
e88+r87+R88,
r88+R89,
r89+R90,
e91+r90+R91,
e92+r91+R92,
e93+r92+R93,
e94+r93+R94,
r94+R95,
r95+R96,
e97+r96+R97,
e98+r97+R98,
e99+r98+R99,
e100+r99+R100,
r100+R101,
e102+r101+R102,
e103+r102+R103,
e104+r103+R104,

	bigpoly_A, bigpoly_B, bigpoly_r, bigpoly_R;
	return (fastgb(r_in,I,I1,I2,I3));
}

proc arrayshift(ideal I, int s)
{
	ideal tmp;
	for(int j = 1; j <= s; j = j+1)
	{
		tmp[j] = I[((j+s-2) mod s) + 1];
	}
	return (tmp);
}

ring rr = (2,X),(
R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30,R31,R32,R33,R34,R35,R36,R37,R38,R39,R40,R41,R42,R43,R44,R45,R46,R47,R48,R49,R50,R51,R52,R53,R54,R55,R56,R57,R58,R59,R60,R61,R62,R63,R64,R65,R66,R67,R68,R69,R70,R71,R72,R73,R74,R75,R76,R77,R78,R79,R80,R81,R82,R83,R84,R85,R86,R87,R88,R89,R90,R91,R92,R93,R94,R95,R96,R97,R98,R99,R100,R101,R102,R103,R104,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104,e0,e1,e2,e3,e5,e6,e7,e8,e10,e11,e13,e15,e17,e18,e19,e21,e22,e24,e26,e27,e29,e30,e32,e33,e34,e35,e36,e39,e40,e41,e42,e43,e44,e45,e46,e47,e49,e50,e53,e54,e55,e56,e57,e58,e59,e60,e65,e66,e67,e68,e69,e70,e71,e72,e73,e74,e75,e76,e77,e78,e79,e81,e82,e84,e85,e86,e87,e88,e91,e92,e93,e94,e97,e98,e99,e100,e102,e103,e104,d0,d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12,d13,d14,d15,d16,d17,d18,d19,d20,d21,d22,d23,d24,d25,d26,d27,d28,d29,d30,d31,d32,d33,d34,d35,d36,d37,d38,d39,d40,d41,d42,d43,d44,d45,d46,d47,d48,d49,d50,d51,d52,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96,c97,c98,c99,c100,c101,c102,c103,c104,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95,a96,a97,a98,a99,a100,a101,a102,a103,a104,R,r,A,B),lp;
minpoly = X^105+X^104+X^102+X^101+X^100+X^97+X^96+X^86+X^85+X^84+X^81+X^80+X^73+X^72+X^70+X^69+X^68+X^65+X^64+X^22+X^21+X^20+X^17+X^16+X^9+X^8+X^6+X^5+X^4+X+1;

number beta = X;
int bSize = 105; // Note this is the size!!!!!!!!!!!!!!!!!!!

int i = 1;
ideal from, to;
/* vectors definitions here */

ideal A_in = a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95,a96,a97,a98,a99,a100,a101,a102,a103,a104;
ideal B_in = b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104;
ideal vec_r = r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36,r37,r38,r39,r40,r41,r42,r43,r44,r45,r46,r47,r48,r49,r50,r51,r52,r53,r54,r55,r56,r57,r58,r59,r60,r61,r62,r63,r64,r65,r66,r67,r68,r69,r70,r71,r72,r73,r74,r75,r76,r77,r78,r79,r80,r81,r82,r83,r84,r85,r86,r87,r88,r89,r90,r91,r92,r93,r94,r95,r96,r97,r98,r99,r100,r101,r102,r103,r104;
ideal vec_R = R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22,R23,R24,R25,R26,R27,R28,R29,R30,R31,R32,R33,R34,R35,R36,R37,R38,R39,R40,R41,R42,R43,R44,R45,R46,R47,R48,R49,R50,R51,R52,R53,R54,R55,R56,R57,R58,R59,R60,R61,R62,R63,R64,R65,R66,R67,R68,R69,R70,R71,R72,R73,R74,R75,R76,R77,R78,R79,R80,R81,R82,R83,R84,R85,R86,R87,R88,R89,R90,R91,R92,R93,R94,R95,R96,R97,R98,R99,R100,R101,R102,R103,R104;
timer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t0=timer; // initialize t by timer

poly f0 = bigPoly_gen(A_in, beta, bSize);

poly f0_B = bigPoly_sub(A_in, B_in, f0, bSize, B);
poly f0_r = bigPoly_sub(A_in, vec_r, f0, bSize, r);
poly f0_R = bigPoly_sub(A_in, vec_R, f0, bSize, R);
/* here is different from SMPO, no need to propagate the last step output for one more time */

ideal I1,I2,I3;
(I1,I2,I3) = preprocess(f0, A_in, B_in, vec_r);
int t1 = timer-t0; // time in ms
"Preprocess Done!";

from[1] = r;
for (i = 1; i < bSize; i= i+1)
{
	to[i+1] = tran(A_in, B_in, from[i], beta, I1, I2, I3, f0, f0_B, f0_r, f0_R);
	"Calc Done! This is iteration No.",i;
	A_in = arrayshift(A_in,bSize);
	B_in = arrayshift(B_in,bSize);
	"Shift Done!";
	from[i+1] = subst(to[i+1],R,r);
	"Subst Done!";
}
"I'm Out!";
//from[5];
to[i+1] = tran(A_in, B_in, from[i], beta, I1, I2, I3, f0, f0_B, f0_r, f0_R);
"Final Calc Done!";
to[i+1];

int t2 = timer - t1;
int tt= timer - t0;

"Pre-time:",t1;
"Loop-time:",t2;
"Total time:",tt;

string sfile = ":w RH"+string(bSize)+"bit.out";
link l=sfile;
string stmp1 = "Pre-time: "+string(t1)+"ms, Total time: "+string(tt)+"ms";
string stmp2 = "Result = "+string(to[bSize+1]);
write(l,stmp1);
write(l,stmp2);
close(l);
quit;

