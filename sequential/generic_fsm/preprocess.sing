
LIB "teachstd.lib";
LIB "general.lib";
LIB "poly.lib";

proc multidiv(poly f, ideal I)
{
	poly p = f;
	poly r,fi = 0,0;
	ideal J;
	int s = size(I);
	J[s] = 0;
	int i, divmark;
	while (lead(p) != 0)
	{
		i = 1;
		divmark = 0;
		while (i <= s and divmark == 0)
		{
			fi = I[i];
			if(lead(p)/lead(fi) != 0)
			{
				J[i] = J[i] + lead(p)/lead(fi);
				p = p - lead(p)/lead(fi)*fi;
				divmark = 1;
			}
			else
			{
				i = i+1;
			}
		}
		if (divmark == 0)
		{
			r = r + lead(p);
			p = p - lead(p);
		}
	}
	return (r);  // Note this is a little different return value, only the remainder!!!!!!
}

proc conv_word(poly origin,/* poly last_poly,*/ ideal red_A, ideal red_B, ideal red_r) /* last_poly is r + g(A,B) */
{
  int n = size(red_A);
  int i;
  ideal word_red = T^(2^n)+T, S^(2^n)+S; // Note: How to present large as 2^233 ??
  for(i = 1; i <= n; i = i + 1)
  {
	origin = subst(origin, lead(red_A[i]), red_A[i] - lead(red_A[i]));
	origin = subst(origin, lead(red_B[i]), red_B[i] - lead(red_B[i]));
	origin = subst(origin, lead(red_r[i]), red_r[i] - lead(red_r[i]));
  }
//  origin = subst(origin, r, last_poly - r);
  origin = multidiv(origin,word_red); // Note: Any trick to reduce ultra high order Word-level terms ??
  return(origin/leadcoef(origin));
}

proc preprocess(poly f0, ideal va, ideal vec_A, ideal vec_B, ideal vec_r)
{
  int len = size(vec_A);
  ideal result;
  poly f1,f2,f3;
  f3 = f0;
  int i = 1;
  int j;
  result[1] = f0/leadcoef(f0);

  for(i = 1; i < len; i= i+1)
  {
	f0 = f3;
	f1 = f0^2;
	f2 = f1 + f0*leadcoef(f1)/leadcoef(f0);
	f3 = multidiv(f2, va);
//	f3;
	result[i+1] = f3/leadcoef(f3);
  }
  poly temp;
  poly tobesub;

  for(i = len; i > 1; i= i-1)
  {
	tobesub = lead(result[i]);
	temp = result[i]-tobesub;
	for(j = i-1; j >= 1; j = j - 1)
	{
	  result[j] = subst(result[j], tobesub, temp);
	}
  }
  
  /* This need to be revise bitwise */
  /*  ideal result_B = subst(result, a0, b0, a1, b1, a2, b2, a3, b3, a4, b4, A, B);
  ideal result_r = subst(result, a0, r0, a1, r1, a2, r2, a3, r3, a4, r4, A, r);  */

  ideal result_B = result;
  ideal result_r = result;
  for(i = 1; i <= len; i=i+1)
  {
	result_B = subst(result_B, vec_A[i], vec_B[i]);
	result_r = subst(result_r, vec_A[i], vec_r[i]);
  }
  result_B = subst(result_B, T, S);
  result_r = subst(result_r, T, S);
  
  return (result,result_B,result_r);
}



ring rr = (2,X), (G17, G10, G13, G11, G2, G9, G5, G15, G16, G12, G8, G3, G1, G7, G14, G6, G0, PI, S, T), lp;
minpoly = X^3 + X + 1;

int i = 1;
ideal from, to;
ideal A_in = G10, G11, G13;
ideal B_in = G5, G6, G7;
ideal vec_r = G5, G6, G7;


poly f0 = G10 + X*G11 + X^2*G13 + T;
ideal va = G0^2+G0, G1^2+G1, G2^2+G2, G3^2+G3, G5^2+G5, G6^2+G6, G7^2+G7, G8^2+G8, G9^2+G9, 
	G10^2+G10, G11^2+G11, G12^2+G12, G13^2+G13, G14^2+G14, G15^2+G15, G16^2+G16, G17^2+G17, 
	S^8 + S, T^8 + T;
ideal I1,I2,I3;
(I1,I2,I3) = preprocess(f0, va, A_in, B_in, vec_r);
poly tran = (X)*G7*G6*G0*G1*G3*S+(X^2)*G7*G6*G0*G1*G3+(X)*G7*G6*G0*G3*S+(X^2)*G7*G6*G0*G3+(X+1)*G7*G6*G0+(X)*G7*G6*G1*G3*S+(X)*G7*G6*G1*G3+(X)*G7*G6*G3*S+(X)*G7*G6*G3+(X+1)*G7*G6+G7*G0*G1*G3*S+G7*G0*G1*G3+G7*G0*G3*S+G7*G0*G3+(X^2)*G7*G1*G2+(X)*G7*G1*G3*S+(X)*G7*G1*G3+(X^2)*G7*G1+(X^2)*G7*G2+(X)*G7*G3*S+(X)*G7*G3+(X^2)*G7+(X)*G6*G0*G1*G3*S+(X^2)*G6*G0*G1*G3+(X)*G6*G0*G3*S+(X^2)*G6*G0*G3+(X)*G6*G0*S+(X^2+X)*G6*G0+(X)*G6*G1*G3*S+(X)*G6*G1*G3+(X)*G6*G3*S+(X)*G6*G3+(X)*G6*S+(X^2+X)*G6+T+G0*G1*G3*S+G0*G1*G3+G0*G3*S+G0*G3+G0+(X^2)*G1*G2+(X)*G1*G3*S+(X)*G1*G3+(X^2)*G1+(X)*G3*S+(X)*G3;
poly tran2 = conv_word(tran,I1,I2,I3);
ideal J_elim = tran2, S^8+S,S, G0^2+G0, G1^2+G1, G2^2+G2, G3^2+G3;
slimgb(J_elim);
