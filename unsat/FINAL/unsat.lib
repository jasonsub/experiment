LIB "general.lib";
LIB "poly.lib";

// Single step polynomial division
proc singlestep_div(poly f, poly g)
{
	poly qt = lead(f)/lead(g);  // quotient
	poly r = f+qt*g;  // remainder
	return (r, qt);
}

// S-polynomial
proc my_spoly(poly f, poly g) // return not only spoly but also coeffs
{
	poly M = lcm(leadmonom(f),leadmonom(g));
	poly S = M/lead(f)*f - M/lead(g)*g;
	poly cf1 = M/lead(f);
	poly cf2 = M/lead(g);
	return (S,cf1,cf2);
}

// Multi-inputs (1~5) OR gates
proc or1(poly f)
{
    return (f);
}

proc or2(poly f, poly g)
{
    return (f+g+f*g);
}

proc or3(poly f1, poly f2, poly f3)
{
    poly g = or2(f1,f2);
    g = or2(g,f3);
    return (g);
}

proc or4(poly f1, poly f2, poly f3, poly f4)
{
    poly g = or3(f1,f2,f3);
    g = or2(g,f4);
    return (g);
}

proc or5(poly f1, poly f2, poly f3, poly f4, poly f5)
{
    poly g = or4(f1,f2,f3,f4);
    g = or2(g,f5);
    return (g);
}

// Multiple polynomial division recording quotients (with vanishing ideal and label mapping)
// Note: return string with original labeling, but matrix keeps temporary labeling for consistency
proc multidiv_Qt(poly f, ideal I, ideal J0, intvec rd)  
{
	poly p = f;
	poly fi,r = 0,0;
	list J;
	ideal Qt;
	int s = size(I);
	int nv = size(J0);
	I = I+J0;
	Qt[s]=0; // make Qt an ideal with size s
	int i, divmark;
	while (lead(p) != 0)
	{
		i = 1;
		divmark = 0;
		while ( i <= (s+nv) and divmark == 0)
		{
			fi = I[i];
			if(lead(p)/lead(fi) != 0)
			{
			  if(i <= s) { // only if fi \in I, record for division
				J = insert(J, rd[i], size(J));
				J = insert(J, lead(p)/lead(fi), size(J));
				Qt[i] = Qt[i] + lead(p)/lead(fi);
			  }
			  p = p - lead(p)/lead(fi)*fi;
			  divmark = 1;
			}
			else
			{
				i = i+1;
			}
		}
		if (divmark == 0)
		{
			r = r + lead(p);
			p = p - lead(p);
		}
	}
	return (r,Qt,J);
}

// Origin size^2 matrix recording coefficient syzygies
// Obsolete now, because it use no-add-new-GB strategy, too little info 
// Just keeping in case of you need do exhaustive experiment using that strategy
proc syzygy_old(ideal I, ideal J0)
{
	int sz = size(I);
	int nv = size(J0);
	int tt = sz*(sz-1) div 2;
	int i,j;
	matrix M[tt][sz];
	poly r,sp,cf1,cf2;
	ideal Qt;
	list dummyL;
	int cnt = 0;
	for(i = 1; i < sz; i++)
	{
	  for(j = i+1; j <= sz; j++)
	  {
		cnt++;
		(sp,cf1,cf2) = my_spoly(I[i], I[j]);
		(r,Qt,dummyL) = multidiv_Qt(sp, I, J0);
		if(lead(sp) == 0)
		{
			M[cnt,1..sz] = Qt;
			M[cnt,i] = M[cnt,i] + cf1;
			M[cnt,j] = M[cnt,j] + cf2;
		}
	  }
	}
	return (M);
}

// Check if 2 polynomials have relatively prime leading monomials
proc relative_prime(poly f1, poly f2)
{
	poly t1 = leadmonom(f1);
	poly t2 = leadmonom(f2);
	poly tt = lcm(t1,t2);
	poly tm = t1*t2;
	if(tt == tm)
	{
		return (1);
	}
	return (0);
}

// Check if a polynomial already exists in the set
proc redundancy(poly r, ideal G) // the newly generated poly in GB must be diff from others
{
	int s = size(G);
	int i;
	if(lead(r) == 0) {return (0);} // Also need to eliminate 0 remainder
	for(i = 1; i<= s; i=i+1)
	{
		if(r == G[i])
		{return (0);}
	}
	return (1);
}

// Core GB engine, run Buchberger's algorithm
// record all reduction with matrix and strings
// coefficient matrix: for example, f1~f9 are original polys, then newly generated f10 will be first row
// representing f10 = c1f1 + ... +c9f9. Then second row f11 = c1'f1 + ... + c9'f9 and so on
// until we get 1 = ...  Matrix size is #newgenerators by #originalpoly(osize)
// Note: matrix column indices use temporary labeling for consistency
proc GBunsat(ideal F, ideal J0, intvec rd, int osize)
{
	ideal G = F;
	int s = size(F);
	int i, judge;
	int j;
	list l;
	poly r,sp,cf1,cf2;
	intvec p,v;
	string cin;  // temp string attaching to cout
	list cout;   // Record all lines of output
	list qt;     // Temp quotient array, has order and duplicates
	ideal Qt;
	matrix M[1][s];
	int sz = s;
	for(i = 2; i <= s; i=i+1)
	{
		for(j = 1; j < i; j=j+1)
		{
			if(relative_prime(F[i],F[j]) == 0)
			{
				p = j,i;
				l = insert(l,p,size(l));
			}
		}
	}
	while(size(l))
	{
		v = l[1];
		l = delete(l,1);
		(sp,cf1,cf2) = my_spoly(G[v[1]],G[v[2]]);
		(r,Qt,qt) = multidiv_Qt(sp, G, J0, rd);
//		Qt;
		if (lead(r) != 0)
		{
			s = s+1;
			G[s] = r;
			// Add a new row to coef matrix
			M = matrix(M,s-sz,sz);
			M[s-sz,1..sz] = Qt[1..sz];
			// Update coefs for original polys only, substitute new generators accordingly
			for(i=sz+1; i<=s-1; i++)
			{
			  if(Qt[i] != 0){
//			  "Im in!";
				M[s-sz,1..sz] = M[s-sz,1..sz] + Qt[i]*M[i-sz,1..sz]; // This product may need reduce v^2+v
			  }
			}
			// Add s-poly coefs
			if(v[1] <= sz) {
			  M[s-sz,v[1]] = M[s-sz,v[1]] + cf1;
			}
			else{
			  M[s-sz,1..sz] = M[s-sz,1..sz] + cf1*M[v[1]-sz,1..sz];
			}
			if(v[2] <= sz) {
			  M[s-sz,v[2]] = M[s-sz,v[2]] + cf2;
			}
			else{
			  M[s-sz,1..sz] = M[s-sz,1..sz] + cf2*M[v[2]-sz,1..sz];
			}
//			print(M);
			if(lead(r) == 1) {"Refute!!! from pair (",v[1],",",v[2],")";
				"Spoly =",sp;
				cin = "e "+string(rd[v[1]])+" "+string(cf1)+" "+string(rd[v[2]])+ " "+string(cf2);
				if(size(qt)) 
				{
					for(i=1; i<= size(qt); i=i+1)
					{
						cin = cin+" "+string(qt[i]);
					}
				}
				cout[s] = cin;
				Qt = M[s-sz,1..sz];
				return (G,Qt,cout); // Return: ideal, ideal, list of strings
			}
			else {"Add new",s," from pair (",v[1],",",v[2],")";
				rd[size(rd)+1] = s-size(F)+osize;
				cin = string(s-size(F)+osize)+" "+string(rd[v[1]])+" "+string(cf1)+" "+string(rd[v[2]])+ " "+string(cf2);
				if(size(qt))
				{
					for(i=1; i<= size(qt); i=i+1)
					{
						cin = cin+" "+string(qt[i]);
					}
				}
				cout[s] = cin;
			}
			for(i = 1; i < s; i=i+1)
			{
				if(relative_prime(G[i],G[s]) == 0)
				{
					p = i,s;
					l = insert(l,p,size(l));
				}
			}
		}
	}
	"Error! Given set is NOT UNSAT in GBunsat!!";
	return (G);
}

// Compute a minimal GB from an extended GB
proc miniGB(ideal G0)
{
	int s = size(G0);
	int i;
	int j;
	int k;
	for (i = 1; i <= s; i = i + 1)
	{
		for (j = 1; j <= s; j = j +1)
		{
			if (lead(G0[j]) != 0)
			{
				if (lead(G0[i])/lead(G0[j]) != 0 and i != j)
				{G0[i] = 0;}
			}
		}
	}
	ideal G = sort(G0)[1];
	s = size(G);
	for (k = 1; k <= s; k = k + 1)
	{
		G[k] = G[k]/leadcoef(G[k]);
	}
	return (G);
}

// New syzygy: when reached a fixpoint of iteration, analyze those s-poly reduce to 0
// by recording the coef vector. If any coef equals to 1, then we find a (somehow) combination
// of that poly composed by others
proc partial_syzygy(ideal F, ideal J0, intvec rd, int osize)
{
	ideal G = F;
	int s = size(F);
	int sz = s;
	int i,j;
	list l;  // currently still use order 1,2 -> 1,3 -> 2,3 -> 1,4 -> 2,4 -> ...
	poly r,sp,cf1,cf2;
	intvec p,v;
	list dummyqt;
	ideal Qt;
	matrix M[1][s];
	matrix res[1][s];
	string cout;
	// No installation, because we wanna keep syzygies
	for(i = 2; i <= s; i=i+1)
	{
		for(j = 1; j < i; j=j+1)
		{
			p = j,i;
			l = insert(l,p,size(l));
		}
	}
	while(size(l))
	{
		v = l[1];
		l = delete(l,1);
		(sp,cf1,cf2) = my_spoly(G[v[1]],G[v[2]]);
		(r,Qt,dummyqt) = multidiv_Qt(sp, G, J0, rd);
		if (lead(r) != 0)
		{
			s = s+1;
			G[s] = r;
			// Add a new row to coef matrix
			M = matrix(M,s-sz,sz);
			M[s-sz,1..sz] = Qt[1..sz];
			// Update coefs for original polys only, substitute new generators accordingly
			for(i=sz+1; i<=s-1; i++)
			{
			  if(Qt[i] != 0){
				M[s-sz,1..sz] = M[s-sz,1..sz] + Qt[i]*M[i-sz,1..sz]; // This product may need reduce v^2+v
			  }
			}
			// Add s-poly coefs
			if(v[1] <= sz) {
			  M[s-sz,v[1]] = M[s-sz,v[1]] + cf1;
			}
			else{
			  M[s-sz,1..sz] = M[s-sz,1..sz] + cf1*M[v[1]-sz,1..sz];
			}
			if(v[2] <= sz) {
			  M[s-sz,v[2]] = M[s-sz,v[2]] + cf2;
			}
			else{
			  M[s-sz,1..sz] = M[s-sz,1..sz] + cf2*M[v[2]-sz,1..sz];
			}
			if(lead(r) == 1) { // in syzygy, no need to track refutation. Just return
				"Refute!!! from pair (",v[1],",",v[2],")";
				return (G); // Return: ideal, ideal, list of strings
			}
			else {"Add new",s," from pair (",v[1],",",v[2],")";
				rd[size(rd)+1] = s-size(F)+osize; // origin set size is needed for conflict-free new rd assign
			}
			for(i = 1; i < s; i=i+1) // again, no installation here
			{
				p = i,s;
				l = insert(l,p,size(l));
			}
		}
		else { // remainder = 0, then search for possible combinations
			// First, update res from Qt, basically same from above
			res[1,1..sz] = Qt[1..sz];
			for(i=sz+1; i<=s; i++)
			{
			  if(Qt[i] != 0){
				res[1,1..sz] = res[1,1..sz] + Qt[i]*M[i-sz,1..sz];
			  }
			}
			if(v[1] <= sz) {
			  res[1,v[1]] = res[1,v[1]] + cf1;
			}
			else{
			  res[1,1..sz] = res[1,1..sz] + cf1*M[v[1]-sz,1..sz];
			}
			if(v[2] <= sz) {
			  res[1,v[2]] = res[1,v[2]] + cf2;
			}
			else{
			  res[1,1..sz] = res[1,1..sz] + cf2*M[v[2]-sz,1..sz];
			}
			// Second, check any entry in res vector = 1
			for(i=1;i<=sz;i++) {
			  if(res[1,i] == 1)
			  {
				cout = string(rd[i])+" is composed by:";
				for(j=1;j<=sz;j++) {
				  if(j != i and res[1,j] != 0)
				  {
					cout = cout+" "+string(rd[j]);
				  }
				}
				cout; // std::cout the result
			  }
			}
		}
	}
	"Error! Given set is NOT UNSAT in Syzygy!!";
	return (G);
}

// Warning! This may take much longer time and memory than partial_syzygy
// Revised from partial_syzygy, inspiration from syzygy_old, utilize the full syzygy matrix since 
// we wanna check GB for each column. Print the first GB=1 column's corresponding idx
proc full_syzygy(ideal F, ideal J0, intvec rd, int osize)
{
	ideal G = F;
	int s = size(F);
	int sz = s;
	int i,j;
	list l;  // currently still use order 1,2 -> 1,3 -> 2,3 -> 1,4 -> 2,4 -> ...
	poly r,sp,cf1,cf2;
	intvec p,v;
	list dummyqt;
	ideal Qt;
	matrix M[1][s];
	matrix res[1][s];
	matrix szg[1][s];
	int sz_szg = 0;
	ideal Jcol, Jres;
	string cout;
	// No installation, because we wanna keep syzygies
	for(i = 2; i <= s; i=i+1)
	{
		for(j = 1; j < i; j=j+1)
		{
			p = j,i;
			l = insert(l,p,size(l));
		}
	}
	while(size(l))
	{
		v = l[1];
		l = delete(l,1);
		(sp,cf1,cf2) = my_spoly(G[v[1]],G[v[2]]);
		(r,Qt,dummyqt) = multidiv_Qt(sp, G, J0, rd);
		if (lead(r) != 0)
		{
			s = s+1;
			G[s] = r;
			// Add a new row to coef matrix
			M = matrix(M,s-sz,sz);
			M[s-sz,1..sz] = Qt[1..sz];
			// Update coefs for original polys only, substitute new generators accordingly
			for(i=sz+1; i<=s-1; i++)
			{
			  if(Qt[i] != 0){
				M[s-sz,1..sz] = M[s-sz,1..sz] + Qt[i]*M[i-sz,1..sz]; // This product may need reduce v^2+v
			  }
			}
			// Add s-poly coefs
			if(v[1] <= sz) {
			  M[s-sz,v[1]] = M[s-sz,v[1]] + cf1;
			}
			else{
			  M[s-sz,1..sz] = M[s-sz,1..sz] + cf1*M[v[1]-sz,1..sz];
			}
			if(v[2] <= sz) {
			  M[s-sz,v[2]] = M[s-sz,v[2]] + cf2;
			}
			else{
			  M[s-sz,1..sz] = M[s-sz,1..sz] + cf2*M[v[2]-sz,1..sz];
			}
			if(lead(r) == 1) { // This part is also diff from partial_syzygy
			// Before termination, conclude syzygy matrix for GB
			"Refute!!! from pair (",v[1],",",v[2],")";
				"Now calculating syzygy redundancy...";
			  // First, abstract column
			  for(i = 1; i <= sz; i = i+1)
			  {
//				if(rd[i] == 48) {
				"Column ",i;
				Jcol = szg[1..sz_szg, i];
//				Jcol;
				Jres = slimgb(Jcol + J0);
//				Jres;
				if(Jres[1] == 1) // We find a combination to coef 1
				{
				  rd[i]," is redundant!!!";
				  break;
				}
//				}
			  }
			// Then normal termination
				
				return (G); 
			}
			else {"Add new",s," from pair (",v[1],",",v[2],")";
				rd[size(rd)+1] = s-size(F)+osize; // origin set size is needed for conflict-free new rd assign
			}
			for(i = 1; i < s; i=i+1) // again, no installation here
			{
				p = i,s;
				l = insert(l,p,size(l));
			}
		}
		else { // This part is diff from partial_syzygy
		
		// remainder = 0, then search for possible combinations
			// First, update res from Qt, basically same from above
			res[1,1..sz] = Qt[1..sz];
			for(i=sz+1; i<=s; i++)
			{
			  if(Qt[i] != 0){
				res[1,1..sz] = res[1,1..sz] + Qt[i]*M[i-sz,1..sz];
			  }
			}
			if(v[1] <= sz) {
			  res[1,v[1]] = res[1,v[1]] + cf1;
			}
			else{
			  res[1,1..sz] = res[1,1..sz] + cf1*M[v[1]-sz,1..sz];
			}
			if(v[2] <= sz) {
			  res[1,v[2]] = res[1,v[2]] + cf2;
			}
			else{
			  res[1,1..sz] = res[1,1..sz] + cf2*M[v[2]-sz,1..sz];
			}
			// Then, add this row to syzygy matrix
			sz_szg++;
			szg = matrix(szg, sz_szg, sz);
			szg[sz_szg,1..sz] = res[1,1..sz]; 
// 			for(i=1;i<=sz;i++) {
// 			  if(res[1,i] == 1)
// 			  {
// 				cout = string(rd[i])+" is composed by:";
// 				for(j=1;j<=sz;j++) {
// 				  if(j != i and res[1,j] != 0)
// 				  {
// 					cout = cout+" "+string(rd[j]);
// 				  }
// 				}
// 				cout; // std::cout the result
// 			  }
// 			}
		}
	}
	"Error! Given set is NOT UNSAT in Syzygy!!";
	return (G);
}