\contentsline {table}{\numberline {3.1}{\ignorespaces Addition and multiplication operations over ${\mathbb {F}}_2$.\vspace {0.5cm}}}{20}
\contentsline {table}{\numberline {3.2}{\ignorespaces Bit-vector, Exponential and Polynomial representation of elements in $\mathbb {F}_{2^4} = \mathbb {F}_2[x] \penalty \z@ \mkern 8mu({\mathgroup \symoperators mod}\mkern 6mux^4+x^3+1)$.}}{22}
\contentsline {table}{\numberline {5.1}{\ignorespaces Truth table for mappings in $\mathbb {B}^3$ and ${\mathbb {F}}_{2^3}$.}}{70}
\contentsline {table}{\numberline {5.2}{\ignorespaces Results of running benchmarks using our tool. Parts I to III denote the time taken by polynomial divisions, bit-level to word-level abstraction, and iterative reachability convergence checking part of our approach, respectively.}}{93}
\contentsline {table}{\numberline {6.1}{\ignorespaces Runtime of Gr\"obner Basis Computation of Agnew's SMPO in Singular using ATO $>$.}}{104}
\contentsline {table}{\numberline {6.2}{\ignorespaces Run-time for verification of bug-free RH-SMPO circuits for SAT, ABC and BDD based methods. \emph {TO} = timeout 14 hrs}}{114}
\contentsline {table}{\numberline {6.3}{\ignorespaces Similarity between RH-SMPO and Agnew's SMPO}}{114}
\contentsline {table}{\numberline {6.4}{\ignorespaces Run-time (seconds) for verification of bug-free and buggy RH-SMPO with \textsc {Singular}}}{115}
\contentsline {table}{\numberline {6.5}{\ignorespaces Run-time (seconds) for verification of bug-free and buggy Agnew's SMPO with \textsc {Singular}}}{115}
\contentsline {table}{\numberline {6.6}{\ignorespaces Run-time (seconds) for verification of RH-SMPO and Agnew's SMPO using C++ implementation}}{115}
\contentsline {table}{\numberline {7.1}{\ignorespaces Mapping Boolean operators to functions over ${\mathbb {F}}_{2^k}$}}{119}
\contentsline {table}{\numberline {7.2}{\ignorespaces Results of running benchmarks using our tool. Asterisk($^*$) denotes that the benchmark was not translated from CNF. Our tool is composed of 3 parts: part I runs a single GB-core algorithm, part II applies the iterative refinement heuristic to run the GB-core algorithm iteratively, part III applies the syzygy heuristic.}}{140}
